<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/cache   
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
  ">
  <!-- 注入方式可以用annotation -->
  <context:annotation-config />
  <!-- 自动检测需要注册对象的包  -->
  <context:component-scan base-package="com.dykj.GSM">
     <!--制定扫包规则，不扫描@Controller注解的JAVA类，其他的还是要扫描  -->
     <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>
  <!-- 允许注解方式的AOP -->
  <aop:aspectj-autoproxy/>
  <!-- 引入外部properties文件  -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
     <property name="locations">
         <list>
           <!-- 这里支持多种寻址方式：classpath和file推荐使用file的方式引入，这样可以将配置和代码分离  -->
           <value>classpath:jdbc.properties</value>
         </list>
     </property>
  </bean>
  <!-- 注入数据源  -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
     <property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 池启动时创建的连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最大连接数据库连接数,设 0 为没有限制  -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 最大等待连接中的数量,设 0 为没有限制  -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 最大等待毫秒数, 单位为 ms, 超过时间会出错误信息 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
  </bean>
  <!-- EHCACHE -->
  <!-- <bean id="defaultCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
  	 <property name="configLocation">
  	     <value>classpath:ehcache.xml</value>
  	 </property>
  </bean> -->
  <!-- 定义ehCache的工厂，并设置所使用的Cache name -->
	<!-- <bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager">
			<ref bean="defaultCacheManager"/>
		</property>
		<property name="cacheName">
			<value>org.taha.cache.METHOD_CACHE</value>
		</property>
	</bean>  -->
	<!-- 配置ehcache的二级缓存策略 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" 
	      p:cacheManager-ref="ehcache"/>
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache.xml" p:shared="true"/>
          
  <!-- 创建SqlSessionFactory，同时指定数据源   -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     <property name="dataSource" ref="dataSource"/>
     <!-- 后边这两部配置完以后，在mybatis的xml文件可以什么都不用写：即可以不用引入mybatis.xml文件 -->
     <!-- 引入mybatis-Configuration.xml配置文件(自动扫描mapping.xml文件 ) -->
     <property name="configLocation" value="classpath:mybatis.xml"/>
     <!-- 自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名 -->
     <property name="typeAliasesPackage" value="com.dykj.GSM.model"></property>
  </bean>
  <!-- DAO接口所在包名，Spring会自动查找其下的类  自动扫描所有的Mapper接口与文件  -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="com.dykj.GSM.mapper.*" />
     <!--  <property name="sqlSessionFactory" value="sqlSessionFactory"></property> -->
  </bean>
  <!-- 配置事务管理器    DataSourceTransactionManager dataSource:引用上面定义的数据源  -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     <property name="dataSource" ref="dataSource" />
  </bean>
  <!-- 注解方式配置事物  使用声明式事务 transaction-manager：引用上面定义的事务管理器    -->
    <tx:annotation-driven transaction-manager="transactionManager" />
  <!-- 定义个通知，指定事务管理器 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 <tx:attributes >
		<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
        <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
        <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
        <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
        <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
        <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
        <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
        <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
	 </tx:attributes>
  </tx:advice>
  <aop:config >
	<!-- 配置一个切入点 -->
	<aop:pointcut expression="execution(* com.dykj.GSM.service.impl*.*(..))" id="service"/>
	<aop:advisor pointcut-ref="service" advice-ref="txAdvice"/>
  </aop:config>
</beans>