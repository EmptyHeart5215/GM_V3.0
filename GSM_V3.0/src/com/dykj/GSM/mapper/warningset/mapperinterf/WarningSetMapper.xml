<?xml version="1.0"  encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dykj.GSM.mapper.warningset.mapperinterf.WarningSetMapper">
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
    <resultMap type="WarningSet" id="warningSetResult">
        <id column="CODE" property="code"/>
         <result column="CREATE_DATE" jdbcType="VARCHAR" property="createDate" />
        <result column="CREATE_BY" jdbcType="VARCHAR" property="createBy" />
        <result column="FLAG_DEL" jdbcType="CHAR" property="flagDel" />
        <result column="FLAG_DISPLAY" jdbcType="CHAR" property="flagDisplay" />
        <result column="SORT" jdbcType="DECIMAL" property="sort" />
        <result column="REMARK" jdbcType="VARCHAR" property="remark" />
        <result column="DEFAULT_BAN_LI_DATE_EVENT" property="defaultBanLiDateEvent" jdbcType="DECIMAL" />
	    <result column="EVENT_TO_YELLOW" property="eventToYellow" jdbcType="DECIMAL" />
	    <result column="DEFAULT_BAN_LI_DATE_CONTRADICT" property="defaultBanLiDateContradict" jdbcType="DECIMAL" />
	    <result column="CONTRADICT_TO_YELLOW" property="contradictToYellow" jdbcType="DECIMAL" />
    </resultMap>

    <!-- 保存实体对象  -->
    <!-- keyProperty	selectKey 语句结果应该被设置的目标属性。  -->
    <!-- resultType	结果的类型。MyBatis 通常可以算出来,但是写上也没有问题。MyBatis 允许任何简单类型用作主键的类型,包括字符串。 -->
    <!-- order	这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE,那么它会首先选择主键,设置 keyProperty 然后执行插入语句。
    如果设置为 AFTER,那么先执行插入语句,然后是 selectKey 元素-这和如 Oracle 数据库相似,可以在插入语句中嵌入序列调用。 -->
    <!-- statementType	和前面的相 同,MyBatis 支持 STATEMENT ,PREPARED 和CALLABLE 语句的映射类型,分别代表 PreparedStatement和CallableStatement 类型。 -->
    <sql id="Base_Column_List" >
	    CODE, CREATE_DATE, CREATE_BY, FLAG_DEL, FLAG_DISPLAY, SORT, REMARK, DEFAULT_BAN_LI_DATE_EVENT, 
	    EVENT_TO_YELLOW, DEFAULT_BAN_LI_DATE_CONTRADICT, CONTRADICT_TO_YELLOW
  </sql>
    <insert id="insert" parameterType="WarningSet">
        <selectKey keyProperty="code" resultType="String" order="BEFORE">
            SELECT SYS_GUID() FROM DUAL
        </selectKey>
	     insert into WARNING_SET (CODE, CREATE_DATE, CREATE_BY, 
	      FLAG_DEL, FLAG_DISPLAY, SORT, 
	      REMARK, DEFAULT_BAN_LI_DATE_EVENT, EVENT_TO_YELLOW, 
	      DEFAULT_BAN_LI_DATE_CONTRADICT, CONTRADICT_TO_YELLOW
	      )
	    values (#{code,jdbcType=VARCHAR}, #{createDate,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, 
	      #{flagDel,jdbcType=CHAR}, #{flagDisplay,jdbcType=CHAR}, #{sort,jdbcType=DECIMAL}, 
	      #{remark,jdbcType=VARCHAR}, #{defaultBanLiDateEvent,jdbcType=DECIMAL}, #{eventToYellow,jdbcType=DECIMAL}, 
	      #{defaultBanLiDateContradict,jdbcType=DECIMAL}, #{contradictToYellow,jdbcType=DECIMAL}
	      )
    </insert>
    <update id="deleteAll" parameterType="String">
        UPDATE WARNING_SET SET FLAG_DEL=1
    </update>
	<select id="queryOne" resultMap="warningSetResult">
        select * from(SELECT * FROM WARNING_SET where FLAG_DEL =0 ORDER BY create_date desc) where rownum&lt;2
    </select>
   
</mapper>