package com.dykj.GSM.service.event.impl;

import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.dykj.GSM.mapper.sys.impl.SysUploadMapperImpl;
import com.dykj.GSM.model.SessionModel;
import com.dykj.GSM.model.base.BJiGouService;
import com.dykj.GSM.model.event.EContradict;
import com.dykj.GSM.model.event.EDelay;
import com.dykj.GSM.model.event.EDuration;
import com.dykj.GSM.model.event.EOpinion;
import com.dykj.GSM.model.event.FlowLine;
import com.dykj.GSM.model.event.FlowNode;
import com.dykj.GSM.utils.DateFormatUtil;
import com.opensymphony.workflow.FactoryException;
import com.opensymphony.workflow.basic.BasicWorkflow;
import com.opensymphony.workflow.config.SpringConfiguration;
import com.opensymphony.workflow.loader.ActionDescriptor;
import com.opensymphony.workflow.loader.ResultDescriptor;
import com.opensymphony.workflow.loader.StepDescriptor;
import com.opensymphony.workflow.loader.WorkflowDescriptor;
import com.opensymphony.workflow.loader.WorkflowFactory;
import com.opensymphony.workflow.spi.SimpleStep;

@Service
public class CopyOfEContradictServiceImpl extends BJiGouService {
	/*
	 * private EEventDaoImpl EEventDao; private RLegalDateDaoImpl RLegalDateDao;
	 * private EOpinionDaoImpl EOpinionDao; private DCallRegisterDaoImpl
	 * DCallRegisterDao; private RUsersDaoImpl RUsersDao;
	 */
	@Autowired
	private SysUploadMapperImpl sysUploadMapperImpl;
	private final String wfname = "EContradict";
	private SpringConfiguration config;
	private WorkflowFactory factory;
	public final static Integer 办结Id;
	public final static Integer 督办Id;
	public final static Integer 部门办结Id;
	public final static Integer 办理天数;
	public final static Integer 上报指挥中心ActionId;
	public final static Integer 申请延时ActionId;
	public final static Integer 同意延时ActionId;
	public final static Integer 同意退办ActionId;
	public final static Integer 驳回延时ActionId;
	public final static Integer 延时审批StepId;
	public final static Integer 中心审查StepId;
	public final static Integer 退办审批StepId;
	public final static Integer 部门办理StepId;
	public final static Integer 立案派遣ActionId;
	public final static Integer 返回重新办理ActionId;
	public final static String 指挥中心权限Id;
	public final static Integer 事件预警天数;
	public final static Integer 自办自结ActionId;
	private static WorkflowDescriptor wfd;
	static {
		Properties prop = new Properties();
		InputStream in = CopyOfEContradictServiceImpl.class.getResourceAsStream("/workflowProperties.properties");
		try {
			prop.load(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		办结Id = Integer.valueOf(prop.getProperty("banJieId").trim());
		督办Id = Integer.valueOf(prop.getProperty("duBanId").trim());
		部门办结Id = Integer.valueOf(prop.getProperty("buMenBanJieId").trim());
		办理天数 = Integer.valueOf(prop.getProperty("banLiTianShu").trim());
		申请延时ActionId = Integer.valueOf(prop.getProperty("shenQingYanShiActionId").trim());
		同意延时ActionId = Integer.valueOf(prop.getProperty("tongYiYanShiActionId").trim());
		驳回延时ActionId = Integer.valueOf(prop.getProperty("boHuiYanShiActionId").trim());
		延时审批StepId = Integer.valueOf(prop.getProperty("yanShiShenPiStepId").trim());
		退办审批StepId = Integer.valueOf(prop.getProperty("tuiBanShenPiStepId").trim());
		中心审查StepId = Integer.valueOf(prop.getProperty("zhongXinShenChaStepId").trim());
		部门办理StepId = Integer.valueOf(prop.getProperty("buMenBanLiStepId").trim());
		立案派遣ActionId = Integer.valueOf(prop.getProperty("liAnPaiQianActionId").trim());
		返回重新办理ActionId = Integer.valueOf(prop.getProperty("fanHuiChongXinBanLiActionId").trim());
		指挥中心权限Id = prop.getProperty("zhiHuiZhongXinQuanXianId").trim();
		事件预警天数 = Integer.valueOf(prop.getProperty("shiJianYuJingTianShu").trim());
		上报指挥中心ActionId = Integer.valueOf(prop.getProperty("shangBaoZhiHuiZhongXinActionId").trim());
		同意退办ActionId = Integer.valueOf(prop.getProperty("tongYiTuiBanActionId").trim());
		自办自结ActionId = Integer.valueOf(prop.getProperty("ziBanZiJieActionId").trim());
	}

	public Map<String, Object> queryInitial(final String userCode) throws Exception {
		final Map<String, Object> map = new HashMap<String, Object>();
		setWfd();
		map.put("WorkflowDescriptor", wfd);

		map.put("userCode", userCode);
		return map;
	}

	private void setWfd() throws FactoryException {
		if (wfd == null) {
			factory.initDone();
			wfd = this.factory.getWorkflow(this.wfname);
		}
	}

	public int add(EContradict eevent, String userCode, int actionID, String owner, EOpinion opinion) throws Exception {

		final BasicWorkflow workflow = new BasicWorkflow(userCode);
		workflow.setConfiguration(this.config);
		this.factory.initDone();
		Map<String, Object> transientVars = new HashMap<String, Object>();
		transientVars.put("owner", owner);
		// 将步骤的开始时间和办理时限存入map中
		putDatesToTransientVars(transientVars, 办理天数);
		long WfID = workflow.initialize(this.wfname, actionID, transientVars); // 初始化一条流程
		eevent.setWfEntry(WfID);
		// 事件添加
		this.addDraft(eevent);
		// eevent = EEventDao.add(eevent);
		// 意见添加
		opinion.setActionId(String.valueOf(actionID));
		opinion.setToPersonCode(userCode);
		opinion.setEntryId(WfID);
		EOpinionDao.add(opinion);
		return (int) WfID;
	}

	/**
	 * 添加草稿
	 * 
	 * @param eevent
	 * @return
	 * @throws Exception
	 */
	public EContradict addDraft(EContradict eevent) throws Exception {
		if (eevent.getCode() == null || "".equals(eevent.getCode().trim()) || eevent.getCode().equals("00000000")) {
			// 事件添加
			eevent = EContradictDao.add(eevent);
		} else {
			eevent.setCreatedDate(new Date());
			EEventDao.modify(eevent);
		}
		return eevent;
	}

	/**
	 * 将步骤的开始时间，和办理时限放入transientVars，在创建新步骤的时候用到
	 * 
	 * @param transientVars
	 * @param duration
	 * @throws Exception
	 */
	private void putDatesToTransientVars(Map<String, Object> transientVars, int duration) throws Exception {
		Date startDate = new Date();
		Calendar ca = Calendar.getInstance();
		ca.setTime(startDate);
		int day = ca.get(Calendar.DAY_OF_MONTH);
		int year = ca.get(Calendar.YEAR);
		int month = ca.get(Calendar.MONTH) + 1;
		int h = ca.get(Calendar.HOUR_OF_DAY);
		int mi = ca.get(Calendar.MINUTE);
		int s = ca.get(Calendar.SECOND);
		List<Map<String, Object>> mapList = RLegalDateDao.queryLegalDateAfterNow(year, month);
		Date dueDate = this.getDueDate(0, 0, mapList, year, month, day, h, mi, s, duration);
		transientVars.put("startDate", startDate);
		transientVars.put("dueDate", dueDate);
	}

	// begin的初始值为0
	public Date getDueDate(int begin, int j_begin, List<Map<String, Object>> mapList, int year, int month, int day,
			int h, int mi, int s, int duration) throws Exception {
		Map<String, Object> sameMonthMap = mapList.get(begin);
		if (((BigDecimal) sameMonthMap.get("MONTH")).intValue() == month
				&& (((BigDecimal) sameMonthMap.get("YEAR")).intValue() == year)) {
			String[] days = sameMonthMap.get("WORK_DAY").toString().split(",");
			for (int j = j_begin; j < days.length - 1; j++) {
				if (Integer.compare(Integer.valueOf(days[j]), day) == 0) {
					for (int n = duration; n > 0; n--) {
						j++;
						if (j == days.length - 1) {
							duration = n;
							day = 0;
							begin++;
							if (month == 12) {
								year++;
								month = 1;
							} else {
								month++;
							}
							return getDueDate(begin, 0, mapList, year, month, day, h, mi, s, duration);
						} else if (n == 1) {
							Calendar ca = Calendar.getInstance();
							ca.set(year, month - 1, Integer.valueOf(days[j]), h, mi, s);
							return ca.getTime();
						}
					}
				}
				if (Integer.compare(Integer.valueOf(days[j]), day) == 1) {
					if (duration == 1) {
						Calendar ca = Calendar.getInstance();
						ca.set(year, month - 1, Integer.valueOf(days[j]), h, mi, s);
						return ca.getTime();
					} else {
						day = Integer.valueOf(days[j]);
						duration = duration - 1;
						j_begin = j;
						h = 8;
						mi = 0;
						s = 0;
						return getDueDate(begin, j_begin, mapList, year, month, day, h, mi, s, duration);
					}
				}
				if (j == days.length - 2 && Integer.compare(Integer.valueOf(days[j]), day) == -1) {// 如果已经是最后一个数了，结果还是小于要找的那个数
					// 直接进入下一个月
					duration = duration + 1;
					day = 0;
					begin++;
					if (month == 12) {
						year++;
						month = 1;
					} else {
						month++;
					}
					return getDueDate(begin, 0, mapList, year, month, day, h, mi, s, duration);
				}
			}
		} else {
			throw new Exception("请先设置节假日");
		}
		return null;
	}

	/**
	 * 修改
	 * 
	 * @param eevent
	 * @return
	 * @throws Exception
	 */
	public int modify(EContradict eevent) throws Exception {
		return EEventDao.modify(eevent);
	}

	/**
	 * 通过主键查询
	 * 
	 * @param code
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> queryByCode(String code) throws Exception {
		return EEventDao.queryByCode(code);
	}

	/**
	 * 以下为张立伟添加
	 * 
	 * @throws Exception
	 */
	public Map<String, Object> queryCurrentStepPage(String sortname, int psize, int page, String sortorder,
			String[] args, SessionModel model) throws Exception {
		Map<String, Object> pageMap = this.EEventDao
				.queryCurrentStepPage(sortname, psize, page, sortorder, args, model);
		if (!model.getRoleCode().equals(指挥中心权限Id)) {
			if (pageMap != null && !pageMap.isEmpty()) {
				List<Map<String, Object>> listMaps = (List<Map<String, Object>>) pageMap.get("rows");
				if (listMaps != null && !listMaps.isEmpty()) {
					this.putAlertLight(listMaps);
				}
			}
		}
		return pageMap;
	}

	// 设置事件预警
	private void putAlertLight(List<Map<String, Object>> listMaps) throws Exception {
		Date startDate = new Date();
		Calendar ca = Calendar.getInstance();
		ca.setTime(startDate);
		final int day = ca.get(Calendar.DAY_OF_MONTH);
		final int year = ca.get(Calendar.YEAR);
		final int month = ca.get(Calendar.MONTH) + 1;
		final int h = ca.get(Calendar.HOUR_OF_DAY);
		final int mi = ca.get(Calendar.MINUTE);
		final int s = ca.get(Calendar.SECOND);
		List<Map<String, Object>> mapList = RLegalDateDao.queryLegalDateAfterNow(year, month);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.CHINA);
		for (Map<String, Object> m : listMaps) {
			if (m.get("DUE_DATE") != null) {
				Date due_date = sdf.parse(m.get("DUE_DATE").toString());
				// 将现在的时间与due-date相比，如果现在时间>due-date则为红灯
				if (startDate.compareTo(due_date) == 1) {
					m.put("light", "red");
				} else {// 将现在时间+1个工作日与due-date相比，如果>due-date则为黄灯，否则则为绿灯
					Date dueDate1 = this.getDueDate(0, 0, mapList, year, month, day, h, mi, s, 事件预警天数);
					if (dueDate1.compareTo(due_date) == 1) {
						m.put("light", "yellow");
					} else {
						m.put("light", "green");
					}
				}
			}
		}
	}

	/*
	 * private void putAlertLight(List<Map<String, Object>> listMaps) throws
	 * Exception { for (Map<String, Object> m : listMaps) {
	 * if("一级".equals(m.get("CODE_EVENT_YUJING_NAME"))){ m.put("light", "red");
	 * }else if("二级".equals(m.get("CODE_EVENT_YUJING_NAME"))){ m.put("light",
	 * "yellow"); }else{ m.put("light", "green"); } } }
	 */
	/**
	 * 查询事件已办
	 * 
	 * @param sortname
	 * @param psize
	 * @param page
	 * @param sortorder
	 * @param args
	 * @return
	 * @throws FactoryException
	 */
	public Map<String, Object> queryHistoryStepPage(String sortname, int psize, int page, String sortorder,
			String[] args, String userCode) throws FactoryException {
		return this.EEventDao.queryHistoryStepPage(sortname, psize, page, sortorder, args, userCode);
	}

	public Map getAllSteps() throws FactoryException {
		setWfd();
		List<StepDescriptor> stepsDescriptors = wfd.getSteps();
		Map<String, String> mapValue = new HashMap<String, String>();
		List<Map<String, Object>> treeMapList = new ArrayList<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> listValue = new ArrayList<String>();
		for (StepDescriptor s : stepsDescriptors) {
			Map<String, Object> treeMap = new HashMap<String, Object>();
			mapValue.put(String.valueOf(s.getId()), s.getName());
			treeMap.put("CODE", String.valueOf(s.getId()));
			treeMap.put("NAME_C", s.getName());
			treeMap.put("PARENT_CODE", "000");
			treeMapList.add(treeMap);
			/*
			 * if (s.getMetaAttributes().get("ISENDSTEP") != null) {
			 * 
			 * }
			 */
			listValue.add(s.getId() + ":" + s.getName());
		}
		map.put("listValue", listValue);
		map.put("mapValue", mapValue);
		map.put("treeMapList", treeMapList);
		return map;
	}

	/**
	 * 获得最后一步step的id
	 */
	@Cacheable(value = "serviceCache")
	public Integer getEndStepId() throws FactoryException {
		setWfd();
		List<StepDescriptor> stepsDescriptors = wfd.getSteps();
		for (int i = stepsDescriptors.size() - 1; i >= 0; i--) {
			StepDescriptor s = stepsDescriptors.get(i);
			if (s.getMetaAttributes().get("ISENDSTEP") != null) {
				return s.getId();
			}
		}
		return null;
	}

	@Cacheable(value = "serviceCache")
	public String getActionName(String actionId) throws FactoryException {

		return wfd.getAction(Integer.valueOf(actionId)).getName();
	}

	/**
	 * 办理事件时，获得事件的详情，包括审批过程
	 * 
	 * @param wfid
	 * @param userCode
	 * @param stepID
	 * @param code
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> queryApproval(String wfid, String userCode, int stepID, String code) throws Exception {
		return this.queryApprovalDetail(wfid, userCode, stepID, code, true);
	}

	/**
	 * 事件已办时查看详情
	 * 
	 * @param wfid
	 * @param userCode
	 * @param stepID
	 * @param code
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> queryApprovalWhenInfoSee(String wfid, String userCode, int stepID, String code)
			throws Exception {
		return this.queryApprovalDetail(wfid, userCode, stepID, code, false);
	}

	private Map<String, Object> queryApprovalDetail(String wfid, String userCode, int stepID, String code,
			Boolean approval) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		if (approval) {
			// 查询流程信息
			BasicWorkflow wf = new BasicWorkflow(userCode);
			wf.setConfiguration(config);
			setWfd();
			StepDescriptor sd = wfd.getStep(stepID);
			// map.put("StepDescriptor", sd);
			// map.put("WorkflowDescriptor", wfd);
			map.put("wfid", wfid);
			map.put("userCode", userCode);
			List<Map<String, Object>> actions = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < sd.getActions().size(); i++) {
				Map<String, Object> action = new HashMap<String, Object>();
				ActionDescriptor ad = (ActionDescriptor) sd.getActions().get(i);
				action.put("name", ad.getName());
				action.put("id", ad.getId());
				// actionDescriptor.put("metaAttributes",
				// ad.getMetaAttributes());
				action.put("WORKINGURL", ad.getMetaAttributes().get("WORKINGURL"));
				action.put("ONMOUSEOVER", ad.getMetaAttributes().get("ONMOUSEOVER"));
				actions.add(action);
			}
			map.put("actions", actions);
			map.put("metaAttributes", sd.getMetaAttributes());
			// 判断如果是stepId是要审批延时，则需要查询延时表得到申请延时的天数
			if (stepID == 延时审批StepId) {
				Map<String, Object> delayMap = EEventDao.getOneDelay(Long.valueOf(wfid));
				map.put("duration_history", delayMap.get("DAYCOUNT_HISTORY"));
				map.put("duration", delayMap.get("DAYCOUNT"));
			}
		}
		// 查询事件详细信息
		Map<String, Object> eevent = EEventDao.queryEventByCode(code);
		map.put("eevent", eevent);
		// 查询出事件的图片信息

		if (eevent.get("APPEAL_IMG") != null && !eevent.get("APPEAL_IMG").toString().equals("")) {
			codes.split(";").map
					.put("eeventImg", sysUploadMapperImpl.queryByCodes(eevent.get("APPEAL_IMG").toString()));
		}
		// 查询办理记录信息
		List<Map<String, Object>> opinions = EOpinionDao.queryOpinions(wfid);
		map.put("opinions", opinions);
		// =========================================================================================================
		// 流程显示
		return map;
	}

	/*
	 * private List<Calendar> getDates(Calendar p_start, Calendar p_end) {
	 * List<Calendar> result = new ArrayList<Calendar>();
	 * p_start.add(Calendar.DAY_OF_YEAR, 1); while (p_start.before(p_end)) {
	 * result.add(p_start); p_start.add(Calendar.DAY_OF_YEAR, 1); }
	 * result.add(p_end); return result; }
	 */
	/**
	 * 执行工作流程
	 * 
	 * @return
	 */
	public int modifyApproval(String eventCode, long wfid, int stepID, int actionID, String owner, String userCode,
			EOpinion opinion, Integer duration) throws Exception {
		// 需要特殊处理的是申请延时，和延时驳回的步骤
		// 申请延时时，需要在延时表中插入一条数据，延时表中的数据有 上一个步骤的开始时间
		// 和due-date,如果申请驳回之后需要这两个属性，插入新步骤，还需要申请延时的天数，
		// 延时同意时，开始时间就是当前系统事件，duration是申请的天数，
		// 延时驳回时，开始时间和due-date还是之前的数值，已经存放到延时表中

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("caller", userCode);
		BasicWorkflow workflow = new BasicWorkflow(userCode);
		workflow.setConfiguration(config);
		List<SimpleStep> currentSteps = workflow.getCurrentSteps(wfid);
		SimpleStep step = currentSteps.get(0);
		// 如果是驳回延时审批，则开始时间和dueDate都是之前的值
		if (actionID == 驳回延时ActionId) {
			Map<String, Object> delayMap = EEventDao.getOneDelay(wfid);
			Date startDate = (Date) delayMap.get("START_DATE");
			Date dueDate = (Date) delayMap.get("DUE_DATE");
			map.put("startDate", startDate);
			map.put("dueDate", dueDate);
		} else {
			if (duration == null) {
				duration = EEventServiceImpl.办理天数;
			}
			// 如果是同意延时，则开始时间变为现在了，duration变成以前的duration+现在的duration
			if (actionID == 同意延时ActionId) {
				Map<String, Object> delayMap = EEventDao.getOneDelay(wfid);
				duration = Integer.valueOf(delayMap.get("DAYCOUNT").toString())
						+ Integer.valueOf(delayMap.get("DAYCOUNT_HISTORY").toString());
			}
			// 将步骤的开始时间和办理时限存入map中
			putDatesToTransientVars(map, duration);
			// 如果是申请延时操作,则需要添加一条延时数据
			if (actionID == 申请延时ActionId) {
				if (duration == null) {
					throw new Exception("没有设置延时天数");
				}
				EDelay delay = new EDelay();
				delay.setCode(step.getId());
				delay.setActionId(actionID);
				delay.setDayCount(duration);
				delay.setDueDate(step.getDueDate());
				delay.setStartDate(step.getStartDate());
				delay.setEntryId(wfid);
				delay.setEventCode(eventCode);
				delay.setCreatedBy(userCode);
				delay.setCreatedDate((Date) map.get("startDate"));
				Map<String, Object> duMap = EEventDao.getOneDuration(wfid);
				delay.setDayCountHistory(Integer.valueOf(duMap.get("duration").toString()));
				EEventDao.addBase(delay);
			}
			if (actionID == 立案派遣ActionId || actionID == 返回重新办理ActionId) {
				EDuration du = new EDuration();
				du.setStepId(step.getStepId());
				du.setCreateBy(userCode);
				du.setCreateDate(DateFormatUtil.getStringDate());
				du.setEntryId(step.getEntryId());
				du.setActionId(actionID);
				du.setEventCode(eventCode);
				du.setCode(String.valueOf(step.getId()));
				du.setDuration(duration);
				EEventDao.addBase(du);
			}
		}

		if (owner != null && !owner.equals("")) {
			map.put("owner", owner);
		} else {
			// 返回到以前
			setWfd();
			ResultDescriptor rd = workflow.getResultDescriptor(wfd, wfid, actionID, String.valueOf(stepID), map);
			List<SimpleStep> historySteps = config.getWorkflowStore().findHistorySteps(wfid);
			for (SimpleStep simpleStep : historySteps) {
				if (rd.getMetaAttributes().get("OWNERSTEP") != null
						&& Integer.valueOf(rd.getMetaAttributes().get("OWNERSTEP").toString()) == simpleStep
								.getStepId()) {
					map.put("owner", simpleStep.getCaller() + "#1");
					break;
				}
			}
		}
		workflow.doAction(Long.valueOf(wfid), actionID, map);
		Map<String, Object> opinionMap = EOpinionDao.queryPreOpinion(wfid);
		// 得到上一条意见，将当前用户作为上一条的caller
		if (opinionMap != null) {
			String code = (String) opinionMap.get("CODE");
			EOpinionDao.updateCaller(userCode, code);
		}
		// 添加意见
		opinion.setActionId(String.valueOf(actionID));
		opinion.setEntryId(wfid);
		EOpinionDao.add(opinion);
		currentSteps = workflow.getCurrentSteps(wfid);
		if (currentSteps != null && !currentSteps.isEmpty()) {
			String currentOwner = currentSteps.get(0).getOwner();
			if (currentOwner.indexOf('#') > 0) {
				currentOwner = currentOwner.substring(0, currentOwner.indexOf('#'));
			}
			SendPush.sendEventMessageAuto(currentOwner, eventCode);
			Map<String, Object> eventMap = EEventDao.queryByCode(eventCode);
			if (eventMap != null && !eventMap.isEmpty()) {
				String eventTitle = "有一条事件待办：" + eventMap.get("NAME_APPEAL");
				JPush.testSendPush(currentOwner, eventTitle);
			}
		}
		return 1;
	}

	/**
	 * 综合查询
	 */
	public Map<String, Object> queryAllSearchPage(String sortname, int psize, int page, String sortorder,
			String[] args, String userCode) throws FactoryException {

		return this.EEventDao.queryAllSearchPage(sortname, psize, page, sortorder, args, userCode, 办结Id);
	}

	/**
	 * 事件注销查询
	 */
	public Map<String, Object> queryCloseEventPage(String sortname, int psize, int page, String sortorder,
			String[] args, String userCode) throws FactoryException {
		return this.EEventDao.queryCloseEventPage(sortname, psize, page, sortorder, args, userCode, 办结Id);
	}

	/**
	 * 事件注销
	 */
	public void deleteEvent(String... codes) throws Exception {
		EEventDao.deleteEvent(codes);
	}

	/**
	 * 事件草稿
	 * 
	 * @param sortname
	 * @param psize
	 * @param page
	 * @param sortorder
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> queryDraftPage(String sortname, int psize, int page, String sortorder, String[] args)
			throws Exception {
		return this.EEventDao.queryDraftPage(sortname, psize, page, sortorder, args);
	}

	/*
	 * private void getWorkDayBetweenTwoDates(Date startDate,Date endDate)
	 * throws Exception { Calendar ca1 = Calendar.getInstance();
	 * ca1.setTime(startDate); int day_1 = ca1.get(Calendar.DAY_OF_MONTH); int
	 * year_1 = ca1.get(Calendar.YEAR); int month_1 = ca1.get(Calendar.MONTH) +
	 * 1; int h_1 = ca1.get(Calendar.HOUR_OF_DAY); int mi_1 =
	 * ca1.get(Calendar.MINUTE); int s_1 = ca1.get(Calendar.SECOND); Calendar
	 * ca2 = Calendar.getInstance(); ca2.setTime(startDate); int day_2 =
	 * ca2.get(Calendar.DAY_OF_MONTH); int year_2 = ca2.get(Calendar.YEAR); int
	 * month_2 = ca2.get(Calendar.MONTH) + 1; int h_2 =
	 * ca2.get(Calendar.HOUR_OF_DAY); int mi_2 = ca2.get(Calendar.MINUTE); int
	 * s_2= ca2.get(Calendar.SECOND); List<Map<String, Object>> mapList =
	 * RLegalDateDao.queryLegalDateAfterNow(year_1, month_1); Map<String,
	 * String> returnMap = new HashMap<String, String>(); String y = ""; String
	 * m = ""; String workDate = ""; for (Map<String, Object> map : mapList) {
	 * String y_temp = map.get("YEAR").toString(); String m_temp =
	 * map.get("MONTH").toString(); String w_temp =
	 * map.get("WORK_DATE").toString(); returnMap.put(y_temp + "-" + m_temp,
	 * w_temp); } for(int y=year1) }
	 */
	/**
	 * 呼叫登记页面的上报指挥中心
	 * 
	 * @param callRegister
	 * @param reply
	 * @throws Exception
	 */
	public void reportTo(DCallRegister callRegister, DCallBack reply, EContradict event, EOpinion opinion)
			throws Exception {
		// 1.------------------------添加呼叫登记、呼叫回复
		DCallRegister register = DCallRegisterDao.add(callRegister, reply);
		// 2.------------------------实现事件受理，加入呼叫Id
		event.setNameAppeal(register.getEventTitle());
		event.setEventAddress(register.getEventSite());
		String userCode = register.getCreatedBy();
		Map<String, Object> userMap = RUsersDao.UserManage(userCode);
		if (userMap != null) {
			event.setCreatedName(userMap.get("LOGIN_NAME").toString());
		}
		event.setAppealName(register.getCallName());
		event.setAppealAddress(register.getAddress());
		event.setAppealTelephone(register.getCPhoneNo());
		event.setAppealContent(register.getEvent());
		event.setCallRegisterCode(register.getCode());
		// 初始化流程
		BasicWorkflow workflow = new BasicWorkflow(userCode);
		workflow.setConfiguration(this.config);
		setWfd();
		ActionDescriptor ad = (ActionDescriptor) wfd.getInitialActions().get(0);
		// 受理的actionId
		int actionId = ad.getId();
		Map<String, Object> transientVars = new HashMap<String, Object>();
		transientVars.put("owner", userCode);
		// 将步骤的开始时间和办理时限存入map中
		putDatesToTransientVars(transientVars, 办理天数);
		long WfID = workflow.initialize(this.wfname, actionId, transientVars); // 初始化一条流程
		event.setWfEntry(WfID);
		// 事件添加
		event = this.addDraft(event);
		// 意见添加
		opinion.setActionId(String.valueOf(actionId));
		opinion.setToPersonCode(userCode);
		opinion.setEntryId(WfID);
		opinion.setActionName(ad.getName());
		String opinionStr = opinion.getOpinion();
		// 受理时意见为空
		opinion.setOpinion(null);
		EOpinionDao.add(opinion);
		// 3.------------------------事件上报指挥中心
		int duration = EEventServiceImpl.办理天数;
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("caller", userCode);
		// 将步骤的开始时间和办理时限存入map中
		ActionDescriptor action = wfd.getAction(上报指挥中心ActionId);
		map.put("owner", action.getMetaAttributes().get("ONMOUSEOVER"));
		putDatesToTransientVars(map, duration);
		// 上报指挥中心
		workflow.doAction(Long.valueOf(WfID), 上报指挥中心ActionId, map);
		Map<String, Object> opinionMap = EOpinionDao.queryPreOpinion(WfID);
		// 得到上一条意见，将当前用户作为上一条的caller
		if (opinionMap != null) {
			String code = (String) opinionMap.get("CODE");
			EOpinionDao.updateCaller(userCode, code);
		}
		// 添加意见
		opinion.setOpinion(opinionStr);
		opinion.setActionId(String.valueOf(上报指挥中心ActionId));
		opinion.setEntryId(WfID);
		opinion.setActionName("上报指挥中心");
		EOpinionDao.add(opinion);
		// 消息推送
		List<SimpleStep> currentSteps = workflow.getCurrentSteps(WfID);
		if (currentSteps != null && !currentSteps.isEmpty()) {
			final String currentOwner = currentSteps.get(0).getOwner()
					.substring(0, currentSteps.get(0).getOwner().indexOf('#'));
			SendPush.sendEventMessageAuto(currentOwner, event.getCode());
		}
	}

	public Map<String, Object> queryAllStepsOfOneEvent(String entryId) throws FactoryException {
		int left = 400;
		int top = 5;
		// 流程图当中step执行的顺序
		Integer[][] stepOrders = { { 1 }, { 3 }, { 6 }, { 11, 8, 9 }, { 12 }, { 13 }, { 4 } };
		Map<Integer, FlowNode> nodeMap = new HashMap<Integer, FlowNode>();
		Map<Integer, FlowLine> lineMap = new HashMap<Integer, FlowLine>();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		setWfd();
		// 所有的步骤
		List<StepDescriptor> stepsDescriptors = wfd.getSteps();
		for (StepDescriptor s : stepsDescriptors) {
			FlowNode node = new FlowNode();
			for (int i = 0; i < stepOrders.length; i++) {
				for (int j = 0; j < stepOrders[i].length; j++) {
					if (s.getId() == stepOrders[i][j]) {
						if (j == 0) {
							node.setLeft(left);
						} else if (j == 1) {
							node.setLeft(left - 160);
						} else {
							node.setLeft(left + 160);
						}
						node.setTop(top + (i + 1) * 70);
						node.setName(s.getName());
					}
				}
			}
			nodeMap.put(s.getId(), node);
			// 步骤中的action
			List<ActionDescriptor> actions = s.getActions();
			for (ActionDescriptor a : actions) {
				FlowLine line = new FlowLine();
				line.setFrom(String.valueOf(s.getId()));
				ResultDescriptor r = a.getUnconditionalResult();
				line.setTo(String.valueOf(r.getStep()));
				line.setType("sl");
				if (自办自结ActionId.equals(a.getId())) {
					line.setType("lr");
					line.setM(node.getLeft() + 400);
				}
				if (同意延时ActionId.equals(a.getId()) || 返回重新办理ActionId.equals(a.getId())) {
					line.setType("lr");
					line.setM(node.getLeft() + 40);
				} else if (同意退办ActionId.equals(a.getId()) || 督办Id.equals(a.getId())) {
					line.setType("lr");
					line.setM(node.getLeft() - 40);
				} else if (驳回延时ActionId.equals(a.getId())) {
					line.setType("lr");
					line.setM(node.getLeft() + node.getWidth() + 40);
				}
				line.setName(a.getName());
				line.setDash(true);
				lineMap.put(a.getId(), line);

			}
		}
		FlowNode startNode = new FlowNode();
		startNode.setType("start yiban");
		startNode.setName("开始");
		startNode.setLeft(left);
		startNode.setTop(top);
		nodeMap.put(0, startNode);
		List<ActionDescriptor> actions = wfd.getInitialActions();
		FlowLine line = new FlowLine();
		line.setName(actions.get(0).getName());
		line.setFrom("0");
		line.setTo(String.valueOf(actions.get(0).getUnconditionalResult().getStep()));
		line.setType("sl");
		line.setDash(false);
		lineMap.put(actions.get(0).getId(), line);

		List<Map<String, Object>> list = EEventDao.queryAllStepsOfOneEvent(entryId);
		for (Map<String, Object> map : list) {
			Integer action_id = map.get("ACTION_ID") == null ? null : Integer.valueOf(map.get("ACTION_ID").toString());
			Integer step_id = map.get("STEP_ID") == null ? null : Integer.valueOf(map.get("STEP_ID").toString());
			FlowNode node = nodeMap.get(step_id);
			FlowLine l = lineMap.get(action_id);
			if (node != null) {
				node.setType("task " + map.get("STATUS"));
				nodeMap.put(step_id, node);
			}
			if (l != null) {
				l.setDash(false);
				lineMap.put(action_id, l);
			}
		}
		FlowNode endNode = nodeMap.get(办结Id);
		if (endNode.getType().contains("yiban")) {
			endNode.setType("end yiban");
		} else {
			endNode.setType("end weiban");
		}

		nodeMap.put(办结Id, endNode);
		returnMap.put("title", "dsdfsdf");
		returnMap.put("nodes", nodeMap);
		returnMap.put("lines", lineMap);
		return returnMap;
	}
}
