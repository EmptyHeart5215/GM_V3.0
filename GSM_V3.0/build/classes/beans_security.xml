<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans  xmlns ="http://www.springframework.org/schema/security"
    xmlns:beans ="http://www.springframework.org/schema/beans"
    xmlns:xsi ="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation ="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd
           http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.2.xsd">
  
    <!--  No bean named 'springSecurityFilterChain' is defined   
  1、 这时发布一下你的项目，查看tomcat的webapps目录下，找到你的项目文件夹的classes文件夹有没有相关的spring.xml文件存在，不存在就会报错
  2、查看web.xml文件<param-value>标签有没有引入applicationContext-security.xml这个文件
    -->
    <!-- 不用经过spring security过滤，一般js、css都不需要过滤   -->
  <http pattern="/*/js/**" security="none"/>
   <http pattern="/resource/**" security="none"/>
    <http pattern="/dwr/**" security="none"/>
 <http pattern="/sys/user/login" security="none" /> 
 <http pattern="/accessDenied.jsp" security="none" /> 
 <http pattern="/login33" security="none"/>
  <http pattern="/sys/security/accessDenied" security="none"/>
  <http pattern="/upload/**" security="none"/>
  <http pattern="/captcha-image" security="none"/>
  <http pattern="/resultServlet/validateCode" security="none"/>
  
 
<http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint"> 

       <anonymous enabled = "false"/> 
      <!-- 尝试访问没有权限的页面时跳转的页面 -->	  
      <access-denied-handler ref="accessDeniedHandler" />
        <!-- session失效去的页面，  -->
        <!-- 单用户登陆 -->
    <session-management invalid-session-url="/login33">
        <concurrency-control error-if-maximum-exceeded="false" max-sessions="50"/>
    </session-management>
    <custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  /> 
     <custom-filter  before ="FILTER_SECURITY_INTERCEPTOR"  ref ="myFilter"/>
     
     <logout logout-url="/logout" logout-success-url="/sys/user/login" invalidate-session="true" />
</http>
 <beans:bean id="accessDeniedHandler"
     class="com.dykj.GSM.security.MyAccessDeniedHandler">
  <beans:property name="accessDeniedUrl" value="/sys/security/accessDenied"/>
</beans:bean>


<!-- <beans:bean id="accessDeniedHandler"
     class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
       <beans:property name="errorPage" value="/sys/security/accessDenied"/>
</beans:bean> -->
     
 <!-- 登录验证器 -->  
<beans:bean id="loginFilter"  
    class="com.dykj.GSM.security.MyUsernamePasswordAuthenticationFilter">
    <beans:property name="filterProcessesUrl" value="/sys/user/userlogin"/>  
        <!-- 验证成功后的处理  -->   
    <beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"/>  
        <!-- 验证失败后的处理  --> 
    <beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"/>  
    <beans:property name="authenticationManager" ref="authenticationManager"/>
</beans:bean> 
    
    <beans:bean id="loginLogAuthenticationSuccessHandler"  
    class="com.dykj.GSM.security.MyAuthenticationSuccessHandler"> 
<!-- <beans:bean id="loginLogAuthenticationSuccessHandler"  
    class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">  -->
      <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->   
    
    
    <!-- <beans:property name="alwaysUseDefaultTargetUrl" value="false"></beans:property> -->
<!--     <beans:property name="defaultTargetUrl" value="/sys/main/index"></beans:property>   -->
  </beans:bean>  
   
   <beans:bean id="simpleUrlAuthenticationFailureHandler"  
    class="com.dykj.GSM.security.MyAuthenticationFailureHandler">  
    <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect  
    <beans:property name="defaultFailureUrl" value="/sys/user/login"></beans:property>  --> 
  </beans:bean>    
     <!--  一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    我们的所有控制将在这三个类中实现，解释详见具体配置  -->
    <!-- 自动扫描的包名，因为配置了自动扫描，就不需要配置控制器Bean了，否则启动会报错 -->
<!-- 认证过滤器 -->  
     <beans:bean id ="myFilter"  class ="com.dykj.GSM.security.MyFilterSecurityInterceptor">
         <beans:property name ="authenticationManager" ref ="authenticationManager"/>
         <beans:property name ="accessDecisionManager" ref ="myAccessDecisionManagerBean"/>
         <beans:property name ="securityMetadataSource" ref ="securityMetadataSource"/>
         <beans:property name ="rejectPublicInvocations" value="true"/>
         
     </beans:bean>
    
     <!--  认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可  -->
     <authentication-manager  alias ="authenticationManager">
     
     <authentication-provider ref="MyDaoAuthenticationProvider">
     </authentication-provider>  
     <!--userDetailServiceImpl 获取登录的用户、用户权限 -->	
     <!--     <authentication-provider user-service-ref ="myUserDetailService">
                如果用户的密码采用加密的话，可以加点“盐”
                <password-encoder hash="md5" />
         </authentication-provider> -->
     </authentication-manager>
     
    <beans:bean id="MyDaoAuthenticationProvider" class="com.dykj.GSM.security.MyDaoAuthenticationProvider">
       <beans:property name="userDetailsService" ref="myUserDetailService"></beans:property>      
    </beans:bean>  
     <beans:bean id ="myUserDetailService" class ="com.dykj.GSM.security.MyUserDetailService">
     <!-- 缓存UserDetails的UserCache -->
      <beans:property name="userCache">
         <beans:bean class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
            <!-- 用于真正缓存的Ehcache对象 -->
            <beans:property name="cache" ref="ehcache4UserDetails"/>
         </beans:bean>
      </beans:property>
     </beans:bean>
     
 <!-- 将使用默认的CacheManager创建一个名为ehcache4UserDetails的Ehcache对象 -->
   <beans:bean id="ehcache4UserDetails" class="org.springframework.cache.ehcache.EhCacheFactoryBean"/>
     <!--  访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源  -->
     <beans:bean id ="myAccessDecisionManagerBean" class ="com.dykj.GSM.security.MyAccessDecisionManager"/>
    
     <!--  资源源数据定义，即定义某一资源可以被哪些角色访问  -->
     <beans:bean id ="securityMetadataSource"  class ="com.dykj.GSM.security.MyInvocationSecurityMetadataSource"   >
     </beans:bean>
      <!-- 未登录的切入点 -->  
  <beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
    <beans:property name="loginFormUrl" value="/sys/user/login"></beans:property>  
  </beans:bean>
</beans:beans>
